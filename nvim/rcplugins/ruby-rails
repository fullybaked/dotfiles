" --------------------------------------------------
" Ruby and Rails
" --------------------------------------------------
call minpac#add('vim-ruby/vim-ruby')
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'

call minpac#add('tpope/vim-rails')
" Inline ruby execution using #=>
call minpac#add('t9md/vim-ruby-xmpfilter')
" Better block level motions in Ruby
call minpac#add('nelstrom/vim-textobj-rubyblock')
" Jump to FactoryBot definitions
call minpac#add('christoomey/vim-rfactory')

" Enable compiler support for ruby
compiler ruby

augroup ruby
  au!
  au FileType ruby set foldmethod=syntax
  au FileType ruby set foldlevel=1
  au FileType ruby nmap <buffer> <Leader>r <Plug>(xmpfilter-mark)
  au FileType ruby nmap <buffer> <Leader>R <Plug>(xmpfilter-run)
  au FileType ruby iabbrev dbg require 'pry'; binding.pry
augroup end

" quick versions of the vim-rails helpers for the normal MVC
nmap <Leader>gm :Files app/models<cr>
nmap <Leader>gv :Files app/views<cr>
nmap <Leader>gc :Files app/controllers<cr>
nmap <Leader>gj :Files app/assets/javascripts<cr>
nmap <Leader>gas :Files app/assets/stylesheets<cr>
nmap <Leader>gt :Files test<cr>
" Use vim-rails :A for alternate file, but open in a vert-split buffer
nmap <Leader>a :vs <bar> A<cr>

" --------------------------------------------------
" Promote variable to let for minitest:spsc / rspec
" --------------------------------------------------
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" --------------------------------------------------
" Rails route completion with FZF
" https://blog.semanticart.com/2017/11/14/rails-route-completion-with-fzf-in-vim
" --------------------------------------------------
function! s:parse_route(selected)
  let l:squished = substitute(join(a:selected), '^\s\+', '', '')
  return split(l:squished)[0] . '_path'
endfunction

inoremap <expr> <C-x><C-r> fzf#complete({
  \ 'source': 'rake routes',
  \ 'reducer': '<sid>parse_route'})

fun! SetMyAssertions()
    syn match myAssertions /\%(assert_valid\)\|\%(refute_valid\)/
    syn match myAssertions /\%(assert_unsorted_results\)/
    syn match myAssertions /\%(assert_css\)\|\%(assert_no_css\)/
    hi link myAssertions rubyAssertion
endfu
autocmd bufenter * :call SetMyAssertions()
autocmd filetype * :call SetMyAssertions()

" vim:ft=vim
