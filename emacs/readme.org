#+TITLE: Emacs Configuration
#+AUTHOR: David Baker
#+EMAIL: david@fullybaked.io

* Better defaults
Increase the garbage collection limit to =20MB= so it runs less frequently and should make Emacs feel snappier.

#+BEGIN_SRC emacs-lisp
(setq-default gc-cons-threshold 20000000)
#+END_SRC

End sentences with a single space after the full-stop.

#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)
#+END_SRC

Always confirm before exiting Emacs

#+BEGIN_SRC emacs-lisp
(setq-default confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

Disable the default startup screen for Emacs

#+BEGIN_SRC emacs-lisp
(setq-default inhibit-startup-screen t)
#+END_SRC

Empty the =*scratch*= buffer

#+BEGIN_SRC emacs-lisp
(setq-default initial-scratch-message nil)
#+END_SRC

Hide the cursor in windows that don't have focus

#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

Merge Emacs registers and OS clipboard for smoother cut/copy/paste experience

#+BEGIN_SRC emacs-lisp
(setq-default select-enable-clipboard t)
#+END_SRC

I don't want to see trailing whitespace, but I /do/ want to delete it when I save a file.

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Set up my prefered global tabs
- I use spaces everywhere unless the project specifically uses tabs
- I like small indents - mostly working with Ruby/Rails so lets make this 2

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

Always focus in help windows when they are opened as I'll most likely want to navigate in them

#+BEGIN_SRC emacs-lisp
(setq-default help-window-select t)
#+END_SRC

Indicate matching parens

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

No delay on showing matching parens

#+BEGIN_SRC emacs-lisp
(setq-default show-paren-delay 0.0)
#+END_SRC

Follow symlinks when opening files

#+BEGIN_SRC emacs-lisp
(setq-default vc-follow-symlinks t)
#+END_SRC

Replace Yes/No prompts with Y/N

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Iterate through CamelCase words as if they are separate words

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

Default to =utf-8= encodings

#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
#+END_SRC

If a file is updated outside of Emacs while open in Emacs, make sure it reloads so content is always current.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

If we can turn on syntax highlighting, then do so.

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

Let's startup with the home directory as our initial working directory

#+BEGIN_SRC emacs-lisp
(cd "~/")
#+END_SRC

Visually highlight marked regions - this /does/ change some functions behaviours so if you want to know more check out =C-h d transient=.

#+BEGIN_SRC emacs-lisp
(transient-mark-mode t)
#+END_SRC

Enable =delete-selection-mode= which makes Emacs behave more like /other/ editors and will replace the marked region with the new text.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Ensure Emacs opens any URL's in the default browser

#+BEGIN_SRC emacs-lisp
(setq-default browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

* Setup =use-package=

Initial configuration for =use-package= is in =init.el=, which ensures it is installed first.

This ensures packages are installed if they are not already available. It means that should  Emacs be opened on a fresh computer, this should fetch all required packages.

#+BEGIN_SRC emacs-lisp

(require 'use-package-ensure)
(setq use-package-always-ensure t)

#+END_SRC

Lets's make sure we always compile packages, and use the latest version.

#+BEGIN_SRC emacs-lisp

(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)

#+END_SRC

* Setup & load =custom.el=

I don't want any customisations being written to my =init.el= so let's keep them in their own file out of the way.

This also means they don't cause Git to think there has been changes except when the file is /actually/ changed by me.

#+BEGIN_SRC emacs-lisp

(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

#+END_SRC

* Backup to =/tmp=

Store backups in the system temp dir instead of the same dir as the file. We're still making backups but not getting in the way.

*Warning*: =/tmp= can be volatile, and which means backups probably won't survive a crash. If you don't want this risk, don't use this setting.

This is probably ok if you don't use backups a alot, and/or save reflexively. There is a risk of data loss though so only use this if you are absolutely sure.

It's wrapped in a function so you can easily toggle it on or off.

#+BEGIN_SRC emacs-lisp

(defun fullybaked/backup-to-tmp ()
  "Store backup files in TEMP-FILE-DIR, which is usually /tmp, instead of in the same dir as the file being edited. We're still backing up, but not putting them in the way."
  (setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t))))

;; remove this line if you don't want this behaviour
(fullybaked/backup-to-tmp)

#+END_SRC

* UI Preferences
** Font

Set the default font to [[https://dank.sh/][=Dank Mono=]] assuming it is installed.

#+BEGIN_SRC emacs-lisp

(when (member "Dank Mono" (font-family-list))
  (set-frame-font "Dank Mono-21" nil t))

#+END_SRC
** Themes

Load in some themes:
- [[https://github.com/greduan/emacs-theme-gruvbox][Gruvbox theme]]

#+BEGIN_SRC emacs-lisp

(use-package gruvbox-theme)

#+END_SRC

Active Gruvbox by default

#+BEGIN_SRC emacs-lisp

(load-theme 'gruvbox-dark-hard t)

#+END_SRC

** Tweak the window chrome

Remove the chrome from around Emacs, like the menu bar, scroll bar etc.

 #+BEGIN_SRC emacs-lisp

(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0)                                ; Disable the tooltips
  (menu-bar-mode 0))                              ; Disable the menu bar

 #+END_SRC

Disable the small scroll bar that appears in the mini-buffer.

#+BEGIN_SRC emacs-lisp

(set-window-scroll-bars (minibuffer-window) nil nil)

#+END_SRC

Start Emacs in full screen

 #+BEGIN_SRC emacs-lisp

(if (eq window-system 'ns)
  (toggle-frame-maximized)
  (toggle-frame-fullscreen))

 #+END_SRC
** Use =minions= to hide all minor modes

I don't really want to see all the various minor modes in the modeline, I've tried =diminish=, but that requires per-package setup, either in =use-package= config or on a separate configuration line.

=minions= goes right ahead and hides all minor modes.

#+BEGIN_SRC emacs-lisp

(use-package minions
  :config
  (setq minions-mode-line-lighter ""
        minions-mode-line-delimiters '("" . ""))
  (minions-mode 1))

#+END_SRC
** Customise visual bell

I don't want Emacs beeping at me everytime I =C-g= or when it otherwise needs to alert me, but I don't want to loose the alert completely.  Flashing the whole screen =visible-bell= was pretty jarring, so this sets it up to only flash the modeline.

#+BEGIN_SRC emacs-lisp

(defun fullybaked/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

(setq visible-bell t)
(setq ring-bell-function 'fullybaked/flash-mode-line)

#+END_SRC
** Line-numbers

I still like having line numbers around, and particularly relative line numbers.  So we'll set those up here, along with a custom function to togggle between relative (for me) and absolute (for pairing).

First off, show them everywhere and set up some formatting so they look consistent.

- Limit the height so different text sizes don't affect line numbers
- Set the width to handle up to 3 digits
- Always have the absolute line number displayed on the current line

#+BEGIN_SRC emacs-lisp

(setq-default display-line-numbers 'visual
              display-line-numbers-current-absolute t
              display-line-numbers-width 3)

(eval-after-load "linum"
  '(set-face-attribute 'linum nil :height 100))

#+END_SRC

Use =linum-relative= for relative numbering, and default to it.

#+BEGIN_SRC emacs-lisp

(use-package linum-relative
  :config
  (linum-relative-toggle))

#+END_SRC

Use C backend for relative numbering, better performance.

#+BEGIN_SRC emacs-lisp

(setq linum-relative-backend 'display-line-numbers-mode)

#+END_SRC

And finally, use =C-c n= to toggle between relative and absolute numbering.

#+BEGIN_SRC emacs-lisp

(defun fullybaked/line-numbers-absolute ()
  "Display absolute line numbers using dispaly-line-numbers available in Emacs 26 and greater. Also switch off relative line numbers supplied by the linum-relative package"
  (interactive)
  (linum-relative-off)
  (display-line-numbers-mode t))

(defun fullybaked/line-numbers-relative ()
  "Display relative line numbers using the linum-relative package, and turn off absolute line numbers"
  (interactive)
  (linum-relative-on)
  (display-line-numbers-mode nil))

(defvar line-number-state 0)
(defun fullybaked/line-numbers-toggle ()
  "Toggle between relative and absolute line numbers."
  (interactive)
  (cond
    ((= line-number-state 0)
      (fullybaked/line-numbers-absolute)
      (setq line-number-state 1))
    ((= line-number-state 1)
      (fullybaked/line-numbers-relative)
      (setq line-number-state 0))))

(global-set-key (kbd "C-c n") 'fullybaked/line-numbers-toggle)

#+END_SRC
** Scroll conservatively

When the point goes outside the window, Emacs tries to center it in the buffer. Let's not do that, instead only scroll as far as the point.

#+BEGIN_SRC emacs-lisp

(setq scroll-conservatively 100)

#+END_SRC
** Use =moody= for a prettier modeline

#+BEGIN_SRC emacs-lisp

(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (setq moody-slant-function 'moody-slant-apple-rgb)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))

#+END_SRC
* Org Mode
** Initialise Org mode
   Org mode is one of the major draws Emacs had for me. Let's set it up for publishing and task management.

   #+BEGIN_SRC emacs-lisp
   (use-package org)
   #+END_SRC

** Heading sizes

   Set up some heading sizes for the bullets. Only dealing with the first three headings as I rarely go more than three deep, and at that level the headings can be the same size.

   I only want the smallest of differences though, luckily Emacs can handle height precision to two decimal places.

   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'org-level-1 nil :height 1.2)
   (set-face-attribute 'org-level-2 nil :height 1.15)
   (set-face-attribute 'org-level-3 nil :height 1.1)
   #+END_SRC

** Prettify lists

Use nicer bullets in lists.

#+BEGIN_SRC emacs-lisp

(use-package org-bullets
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))

#+END_SRC

Use a little downward arrow instead of the ellipsis for expanding list items.

#+BEGIN_SRC emacs-lisp

(setq org-ellipsis " ⬎")

#+END_SRC

** Code blocks

Use syntax highlighting when editing in code blocks

#+BEGIN_SRC emacs-lisp

(setq org-src-fontify-natively t)

#+END_SRC

When editing the code block, use the current window instead of opening a new one.

#+BEGIN_SRC emacs-lisp

(setq org-src-window-setup 'current-window)

#+END_SRC

Add an Org mode templace for =emacs-lisp= code blocks, as I predominantly use Org mode for my Emacs configuration. Map this to =<el= for super quick code blocks.

#+BEGIN_SRC emacs-lisp

(add-to-list 'org-structure-template-alist
  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

#+END_SRC
** Task lists
   Set up my task state list

   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "CANCELED(c)")))
   #+END_SRC


   Store tasks in the =.emacs.d= directory

   #+BEGIN_SRC emacs-lisp

   (setq org-directory "~/.emacs.d/org")

   (defun org-file-path (filename)
     "Return the absolute address of an org file, given its relative name."
     (concat (file-name-as-directory org-directory) filename))

   (setq org-inbox-file (org-file-path "inbox.org"))
   (setq org-index-file (org-file-path "index.org"))
   (setq org-archive-location
         (concat (org-file-path "archive.org") "::* From %s"))

   #+END_SRC

   Derive the agenda from the index file

   #+BEGIN_SRC emacs-lisp

   (setq org-agenda-files (list org-index-file))

   #+END_SRC

   Hitting =C-c C-x C-s= marks the task as done and moves to archive.

   #+BEGIN_SRC emacs-lisp

   (defun fullybaked/mark-done-and-archive ()
     "Mark the state of an org-mode item as DONE and archive it."
     (interactive)
     (org-todo 'done)
     (org-archive-subtree))

   (define-key org-mode-map (kbd "C-c C-x C-s") 'fullybaked/mark-done-and-archive)

   #+END_SRC

   Record when the task was archived.

   #+BEGIN_SRC emacs-lisp

   (setq org-log-done 'time)

   #+END_SRC

*** Capture Templates

Define a few common tasks as capture templates.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo"
         entry
         (file+headline org-index-file "Inbox")
         "* TODO %?\n")))
#+END_SRC

When starting an Org capture, I typically want to be in insert mode right off the bat, so let's do that.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

*** Keybindings

A few handy keys

#+BEGIN_SRC emacs-lisp

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)

#+END_SRC

Quickly open the task list

#+BEGIN_SRC emacs-lisp

(defun fullybaked/open-index-file ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (end-of-buffer))

#+END_SRC

Use =M-n= to capture a new task

#+BEGIN_SRC emacs-lisp

(defun org-capture-todo ()
  (interactive)
  (org-capture :keys "t"))

(global-set-key (kbd "M-n") 'org-capture-todo)

#+END_SRC

** Export to HTML

#+BEGIN_SRC emacs-lisp

(use-package htmlize)

#+END_SRC

** Export to Twitter Bootstrap formatted HTML

#+BEGIN_SRC emacs-lisp

(use-package ox-twbs)

#+END_SRC
* Utility functions
Some handy functions for various tasks in the rest of my configuration or just general use.

#+BEGIN_SRC emacs-lisp
(defun fullybaked/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(defun fullybaked/switch-to-previous-buffer ()
  "Switch to previously open buffer. Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(defun fullybaked/insert-hash ()
  "Insert a pound/hash symbol into the buffer on Meta-3 keypress. Emacs on macOS doesn't always support this, at least on UK keyboards"
  (insert "#"))
(global-set-key (kbd "M-3") '(lambda()(interactive)(fullybaked/insert-hash)))

(defun fullybaked/add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))

(defun fullybaked/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' exec-path."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))

(defun fullybaked/visit-last-migration ()
  "Open the most recent Rails migration. Relies on projectile."
  (interactive)
  (let ((migrations
         (directory-files
          (expand-file-name "db/migrate" (projectile-project-root)) t)))
    (find-file (car (last migrations)))))

(defun fullybaked/rename-file (new-name)
  (interactive "FNew name: ")
  (let ((filename (buffer-file-name)))
    (if filename
        (progn
          (when (buffer-modified-p)
             (save-buffer))
          (rename-file filename new-name t)
          (kill-buffer (current-buffer))
          (find-file new-name)
          (message "Renamed '%s' -> '%s'" filename new-name))
      (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

#+END_SRC

* Features
** Vim using =Evil=
Use =evil=

#+BEGIN_SRC emacs-lisp
(use-package evil
    :config
    (evil-mode 1))
#+END_SRC

Configure =C-u= to be Vim-like instead of the Emacs prefix.  These keybindings try to mimic the Vim version, which is to page up in normal and visual, and to delete to the previous indent if in insert.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-insert-state-map (kbd "C-u")
  (lambda ()
    (interactive)
    (evil-delete (point-at-bol) (point))))
#+END_SRC

Enable surround everywhere.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC

Use evil with Org agendas.

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

Use =evil-escape= and bind it to =jk=.

#+BEGIN_SRC emacs-lisp
(use-package evil-escape
  :config
  (setq-default evil-escape-key-sequence "jk")
  (setq-default evil-escape-delay 0.1)
  (evil-escape-mode))
#+END_SRC

** Configure =ivy= and =counsel=

 #+BEGIN_SRC emacs-lisp

 (use-package counsel
   :bind
   ("M-x" . 'counsel-M-x)
   ("C-s" . 'swiper)

   :config
   (use-package flx)
   (use-package smex)

   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
   (setq ivy-initial-inputs-alist nil)
   (setq ivy-re-builders-alist
         '((swiper . ivy--regex-plus)
           (t . ivy--regex-fuzzy))))

 #+END_SRC
** Auto-complete

Let's set up =company= for auto-completion

 #+BEGIN_SRC emacs-lisp

(use-package company
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("<right>" . company-complete-common))
  :hook
  (after-init . global-company-mode))

 #+END_SRC

** Splitting and rebalancing panes

 Override the Emacs default for splitting windows so that we always re-balance the windows to be equal sizes in the available space.

 Also I nearly always want to use the new split first, so lets get the active cursor-point over there.

 #+BEGIN_SRC emacs-lisp

 (defun fullybaked/split-window-below-and-switch ()
   "Split the window horizontally, then switch to the new pane."
   (interactive)
   (split-window-below)
   (balance-windows)
   (other-window 1))

 (defun fullybaked/split-window-right-and-switch ()
   "Split the window vertically, then switch to the new pane."
   (interactive)
   (split-window-right)
   (balance-windows)
   (other-window 1))

 (global-set-key (kbd "C-x 2") 'fullybaked/split-window-below-and-switch)
 (global-set-key (kbd "C-x 3") 'fullybaked/split-window-right-and-switch)

 (global-set-key (kbd "C-c l") 'windmove-right)
 (global-set-key (kbd "C-c h") 'windmove-left)
 (global-set-key (kbd "C-c k") 'windmove-up)
 (global-set-key (kbd "C-c j") 'windmove-down)
 (global-set-key (kbd "C-c =") 'balance-windows)

 #+END_SRC

** Use =which-key=

 Type the first part of a key chord and =which-key= will show all the possible keys/chords that can follow, along with the function to which they are mapped.

 #+BEGIN_SRC emacs-lisp

 (use-package which-key
   :config (which-key-mode))

 #+END_SRC

** Use =flycheck= for linting

 #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook
  ((css-mode . flycheck-mode)
   (emacs-lisp-mode . flycheck-mode)
   (js-mode . flycheck-mode)
   (ruby-mode . flycheck-mode))
  :custom
  (flycheck-check-syntax-automatically '(save mode-enabled))
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (flycheck-display-errors-delay .3))

 #+END_SRC

** Git with =magit=

Use =magit= to handle all Git things, because it's freakin awesome

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :config
  (use-package evil-magit)
  (use-package with-editor)
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)

  (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

Open the current branches PR on Github

#+BEGIN_SRC emacs-lisp
(defun fullybaked/visit-pull-request-url ()
  "Visit the current branch's PR on Github."
  (interactive)
  (browse-url
   (format "https://github.com/%s/pull/new/%s"
           (replace-regexp-in-string
            "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
            (magit-get "remote"
                       (magit-get-push-remote)
                       "url"))
           (magit-get-current-branch))))

(eval-after-load 'magit
  '(define-key magit-mode-map "v"
     #'fullybaked/visit-pull-request-url))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp

(use-package projectile
  :bind
  ("C-c v" . 'projectile-ag)

  :config
  (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
  (evil-define-key 'motion ag-mode-map (kbd "C-p") 'projectile-find-file)
  (evil-define-key 'motion rspec-mode-map (kbd "C-p") 'projectile-find-file)

  (setq projectile-completion-system 'ivy)
  (setq projectile-switch-project-action 'projectile-dired)
  (setq projectile-require-project-root nil))

#+END_SRC

Use projectile everywhere

#+BEGIN_SRC emacs-lisp

(projectile-global-mode)

#+END_SRC
** Directories with =dired=
   Hide dotfiles by default, toggle them with =.=

#+BEGIN_SRC emacs-lisp
(use-package dired-hide-dotfiles
  :config
  (dired-hide-dotfiles-mode)
  (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+END_SRC

Show file sizes in human readable formats in Dired

#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-alh")
#+END_SRC

Use =j= and =k= to move around in =dired=

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
(evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)
#+END_SRC

** Snippets with =yasnippet=
#+BEGIN_SRC emacs-lisp
(use-package yasnippet)
#+END_SRC

Locate snippet files in =~/.emacs/snippets/text-mode=, but this /should/ be symlinked in from the dotfiles repo. Then enabled it globally.  It can be turned off in the places I don't want it.

#+BEGIN_SRC emacs-lisp
(setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
(yas-global-mode 1)
#+END_SRC

Don't let =yasnippet= try to indent the snippet, this can go wrong in some situations.

#+BEGIN_SRC emacs-lisp
(setq yas/indent-line nil)
#+END_SRC
* Keybindings with =General=
Use =general= to handle complex/custom keybindings. Especially handy with =Evil= stuff, like setting a leader key.

#+BEGIN_SRC emacs-lisp
(use-package general)
#+END_SRC

Set up =SPC= as the leader key

#+BEGIN_SRC emacs-lisp
(general-create-definer my-leader-def :prefix "SPC")
#+END_SRC

Global keybindings under <Leader> key

#+BEGIN_SRC emacs-lisp
(my-leader-def
  :keymaps 'normal
  "SPC" 'fullybaked/switch-to-previous-buffer
  "gs" 'magit-status
  "b" 'counsel-switch-buffer
  "\\" 'fullybaked/split-window-right-and-switch
  "-" 'fullybaked/split-window-below-and-switch
  "tf" 'fullybaked/run-rails-test-file
  "tn" 'fullybaked/run-rails-test-at-point
  "gc" 'fullybaked/comment-or-uncomment-region-or-line
)
#+END_SRC

Set up leader keys to jump between headlines in Org-mode, <Leader>p and <Leader>n to jump (p)revious and (n)ext headlines

#+BEGIN_SRC emacs-lisp
(my-leader-def
  :states 'normal
  :keymaps 'org-mode-map
  "p" 'org-previous-visible-heading
  "n" 'org-next-visible-heading
)'normal
#+END_SRC
* Custom keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-j") 'forward-paragraph)
(global-set-key (kbd "s-k") 'backward-paragraph)

(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

* Terminal setup
Use =multi-term= to manage shell sessions and bind it to =C-c t=

#+BEGIN_SRC emacs-lisp
(use-package multi-term)
(global-set-key (kbd "C-c t") 'multi-term)
#+END_SRC

Use =zsh= for the shell

#+BEGIN_SRC emacs-lisp
(setq multi-term-program-switches "--login")
#+END_SRC

Let's not use Evil mode on the terminal. I don't use the vi bindings normally, so won't use them in Emacs-Terminal either.

#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'term-mode 'emacs)
#+END_SRC

- Fix pasting in the terminal.  Yanking in =term-mode= doesn't quite work, the text appears in the buffer but isn't sent to the shell. Correctly bind =C-y= to yank how we'd expect.
- Bind =M-o= to switch to the other window
- Turn off =yasnippet= as I want the shell to do it's own tab-completion

#+BEGIN_SRC emacs-lisp
(defun fullybaked/term-paste (&optional string)
  (interactive)
  (process-send-string
   (get-buffer-process (current-buffer))
   (if string string (current-kill 0))))

(add-hook 'term-mode-hook
          (lambda ()
            (goto-address-mode)
            (define-key term-raw-map (kbd "C-y") 'fullybaked/term-paste)
            (define-key term-raw-map (kbd "M-o") 'other-window)
            (setq yas-dont-activate t)))
#+END_SRC

* Languages
** Ruby
I use =rbenv= to manage my local Ruby and RubyGems so lets configure Emacs to know about it.

#+BEGIN_SRC emacs-lisp

(use-package rbenv
  :config
  (global-rbenv-mode)
  (rbenv-use-global))

#+END_SRC

Running tests from within Emacs is awesome, but...

#+BEGIN_SRC emacs-lisp
(use-package ruby-test-mode)
#+END_SRC

the =ruby-test-mode= doesn't take into account newer versions a Rails so,

#+BEGIN_SRC emacs-lisp
(defun fullybaked/run-rails-test-file()
  "Run current test file through the rails command"
  (interactive)
  (let ((filename (ruby-test-find-file)))
    (compile (format "bundle exec rails test %s" filename))))

(defun run-rails-test-at-point ()
  "Run the closest test to the line number of the point, don't use a regex to guess the name, just pass the rails command the actual line number"
  (interactive)
  (let* ((filename (ruby-test-find-file))
         (buffername (get-file-buffer filename)))
    (with-current-buffer buffername
      (let ((line (line-number-at-pos (point))))
        (compile (format "bundle exec rails test %s:%s" filename line))))
    )
  )
#+END_SRC

Use =projectile-rails= for some helpers

- =C-c r m/c/v= open model/controller/view

#+BEGIN_SRC emacs-lisp
(use-package projectile-rails
  :config
  (projectile-rails-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook
          (lambda ()
            (setq ruby-insert-encoding-magic-comment nil)
            (ruby-test-mode)
            (flycheck-mode)
            (local-set-key "\r" 'newline-and-indent)
            (define-key ruby-mode-map (kbd "C-c C-c") 'xmp)))
#+END_SRC

Associate Ruby with certain files that don't typically have a =rb= extension

#+BEGIN_SRC emacs-lisp
(fullybaked/add-auto-mode
 'ruby-mode
 "\\Gemfile$"
 "\\.rake$"
 "\\.gemspec$"
 "\\Guardfile$"
 "\\Rakefile$")
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'web-mode-hook
          (lambda ()
            (rainbow-mode)
            (ruby-test-mode)
            (setq web-mode-markup-indent-offset 2)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(fullybaked/add-auto-mode
 'web-mode
 "\\.erb$"
 "\\.html$")
#+END_SRC
** CSS / SASS
Indent by 2 paces

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :config
  (setq css-indent-offset 2))
#+END_SRC

Don't compile SCSS on save

#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :config
  (setq scss-compile-at-save nil))
#+END_SRC
** Javascript
Indent by 2 spaces

#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
#+END_SRC
** Lisp
Balance parens

#+BEGIN_SRC emacs-lisp
(use-package paredit)
#+END_SRC

Colourise matching parens

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

All the lisps have some shared features, so we want to do the same things for all of them. That includes using paredit, rainbow-delimiters, and highlighting the whole expression when point is on a parenthesis.

#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook (lambda ()
                   (setq show-paren-style 'expression)
                   (paredit-mode)
                   (rainbow-delimiters-mode))))
#+END_SRC

Show documentation when writing Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC

* Resources

List of the resources I used as I learned about Emacs and how this config file was put together.

[[https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/][Aaron Beiber dotfiles]]

[[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Aaron Beiber - How to stop worrying and love Emacs]]

[[https://www.youtube.com/watch?v=SzA2YODtgK4][Harry Schwartz - Getting started with Org mode]]

[[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/][Harry Schwartz - Emacs config]]

[[https://thoughtbot.com/upcase/videos/emacs-intro][Thoughtbot Upcase - Intro to Emacs]]

[[http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/][Setting up ZSH in Emacs multi-term]]

[[https://worace.works/2016/06/07/getting-started-with-emacs-for-ruby/][Emacs as a Ruby IDE]]

[[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][AngryBacon - DotEmacs config]]

[[https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/][Samuel Barreto - Keybinding Stategies in Emacs]]
